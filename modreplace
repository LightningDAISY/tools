#! /usr/bin/env perl
use strict;
use warnings;
no warnings 'uninitialized';
require 5.6.0;
use Term::ANSIColor qw(:constants);
use POSIX qw(ceil);
use feature qw(say);
our $VERSION = 1.0.0;

sub usage
{
    print RED, "\n";
    print <<"_USAGE_";
    modreplace -[options] [search-path] [source-word] [target-word]

    [options]
        -i ... 大文字小文字同一視

    [search-path]
        探索対象ディレクトリ。
        絶対パス or カレントからの相対パス

    [source-word]
        正規表現

    [extensions]
        対象拡張子
            ex: [[pl txt]]

_USAGE_
    print CLEAR, "\n"
}

sub get_options(\@\%\@)
{
    my($values, $options, $extensions) = @_;
    my $extension_flag = 0;
    for my $param(@ARGV) {
        if($extension_flag == 0 and $param =~ /^\[\[/) {
            $extension_flag = 1;
        } elsif($extension_flag == 1 and $param =~ /\]\]$/) {
            $extension_flag = 2;
        }
        if($extension_flag) {
            $param =~ s/^\[\[//;
            $param =~ s/^\.//;
            $param =~ s/\]\]$//;
            push @$extensions, $param if length $param;
            $extension_flag == 2 and $extension_flag = 0;
        } else {
            if($param =~ /^-(\w+)/) {
                my $option_s = lc $1;
                for my $option(split //, $option_s) {
                    $options->{$option} = 1
                }
            } else {
                push @$values, $param
            }
        }
    }
}

sub filename
{
    my($path) = @_;
    my @dirs = split m!/!, $path;
    pop @dirs
}

sub is_not_target_extensions
{
    my($file, $extensions) = @_;
    scalar(@$extensions) < 1 and return undef;
    for my $extension(@$extensions) {
        $file =~ /\.$extension$/ and return undef
    }
    1
}

sub saveReplaced
{
	my($filename, $replaced_string) = @_;
	open my $fh, '>', $filename or return;
    print $fh $replaced_string;
	close $fh;
}

use Data::Dumper;

sub filelist
{
    my($path, $options, $source_word, $target_word, $hash, $extensions) = @_;
    $path =~ s{/$}{};
	my @list = glob $path . '/*';

    for my $file(@list)
	{
        if($file eq '.' or $file eq '..') {
            next;
        } elsif(-d $file) {
            filelist($file, $options, $source_word, $target_word, $hash, $extensions)
        } elsif(is_not_target_extensions($file, $extensions)) {
            next;
        } else {
            open my $fh, '<', $file or next;
            my $string = "";
			my $buf;
            while(read $fh, $buf, 100)
			{
                $string .= $buf;
            }
            close $fh;

			my $matched_num = undef;
			$matched_num = exists $options->{"i"} ?
		   		$string =~ s/($source_word)/$target_word/ig :
				$string =~ s/($source_word)/$target_word/g
			;
            $matched_num or next;
            $hash->{$file} = "$1 > $target_word";
			saveReplaced($file, $string)
		}
    }
}

sub main
{

    my(@values, %options, @extensions);
    get_options(@values, %options, @extensions);
    my($parent_path, $source_word, $target_word) = @values;
    $parent_path =~ s{/+$}{};

	if(exists $options{'h'} or 2 > scalar @values) {
        usage
    } elsif(not -d $parent_path) {
        print RED, 'Directory ' . $parent_path . " is not found";
        say CLEAR
    } else {
        my %files;
        filelist($parent_path, \%options, $source_word, $target_word, \%files, \@extensions);
        my $cnt = ceil(scalar keys %files);
        my $result = $cnt == 0 ? 'no files are' :
                     $cnt == 1 ? '1 file is'  : "$cnt files are";
        print YELLOW "$result found.";
        say CLEAR;
        for my $fname(sort keys %files) {
            print CYAN, $fname . "\n";
            say CLEAR, "    " .  $files{$fname}
        }
    }
}

main;
1

__END__

=pod

=encoding utf8

=head1 NAME

  modreplace - fulltext, fulllist module search engine.


=head1 SYNOPSIS

  modreplace /usr/local/lib -i latex


=head1 DESCRIPTION

  ファイルの中身を正規表現で置換します。
  第1引数は探索path、第2引数は置換前文字列(正規表現)。第3引数は置換後文字列。
  メタ文字や空白を含む場合はシングルクォートで囲って下さい。

      ex: modreplace /usr/share/perl/ 'sub\s+benchmark' 'sub phaser'

  -iオプションでignore caseです
  コマンドラインの末尾に[[...]]を記述すると検索対象の拡張子を絞り込めます。

      ex: [[pl py rb php]]

=head1 AUTHOR

   LightningDAISY <webmaster@umr.biz>

=head1 LICENCE AND COPYRIGHT

  Copyright (C) 2018 LightningDAISY. All right reserved.

